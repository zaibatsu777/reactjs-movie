import{j as r}from"./jsx-runtime-QvZ8i92b.js";import{c as o,a as n}from"./animation-CmKoZPRv.js";import"./index-uubelm5h.js";function t({loading:i=!0,color:m="#000000",speedMultiplier:u=1,cssOverride:c={},size:e=15,margin:f=2,...y}){const g={display:"inherit",...c},b=o("RiseLoader",`0% {transform: scale(1.1)}
    25% {transform: translateY(-${e}px)}
    50% {transform: scale(0.4)}
    75% {transform: translateY(${e}px)}
    100% {transform: translateY(0) scale(1.0)}`,"even"),x=o("RiseLoader",`0% {transform: scale(0.4)}
    25% {transform: translateY(${e}px)}
    50% {transform: scale(1.1)}
    75% {transform: translateY(${-e}px)}
    100% {transform: translateY(0) scale(0.75)}`,"odd"),a=h=>({backgroundColor:m,width:n(e),height:n(e),margin:n(f),borderRadius:"100%",display:"inline-block",animation:`${h%2===0?b:x} ${1/u}s 0s infinite cubic-bezier(0.15, 0.46, 0.9, 0.6)`,animationFillMode:"both"});return i?r.jsxs("span",{style:g,...y,children:[r.jsx("span",{style:a(1)}),r.jsx("span",{style:a(2)}),r.jsx("span",{style:a(3)}),r.jsx("span",{style:a(4)}),r.jsx("span",{style:a(5)})]}):null}try{t.displayName="RiseLoader",t.__docgenInfo={description:"",displayName:"RiseLoader",props:{size:{defaultValue:{value:"15"},description:"",name:"size",required:!1,type:{name:"LengthType"}},margin:{defaultValue:{value:"2"},description:"",name:"margin",required:!1,type:{name:"LengthType"}},color:{defaultValue:{value:"#000000"},description:"",name:"color",required:!1,type:{name:"string"}},loading:{defaultValue:{value:"true"},description:"",name:"loading",required:!1,type:{name:"boolean"}},cssOverride:{defaultValue:{value:"{}"},description:"",name:"cssOverride",required:!1,type:{name:"CSSProperties"}},speedMultiplier:{defaultValue:{value:"1"},description:"",name:"speedMultiplier",required:!1,type:{name:"number"}}}}}catch{}const L={component:t,argTypes:{size:{description:"Can be number or string. When number, unit is assumed as px. When string, a unit is expected to be passed in",control:{type:"number"}},margin:{description:"Can be number or string. When number, unit is assumed as px. When string, a unit is expected to be passed in",control:{type:"number"}}}},s={};var l,p,d;s.parameters={...s.parameters,docs:{...(l=s.parameters)==null?void 0:l.docs,source:{originalSource:"{}",...(d=(p=s.parameters)==null?void 0:p.docs)==null?void 0:d.source}}};const R=["Primary"];export{s as Primary,R as __namedExportsOrder,L as default};
